

1). https://www.tutorialspoint.com/spring/spring_architecture.htm

Spring Architecture.
---------------------------------------------------------------------------------------------------------------


2) https://www.tutorialspoint.com/spring/spring_dependency_injection.htm


 Dependency Injection.
    * setter method
    * constructors
------------------------------------------------------------------------------------------------------------
constructor
-----------------------------------------------------------------------------------------
<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <!-- Definition for textEditor bean -->
   <bean id = "employee" class = "com.cts.demo.model.Employee">
      <constructor-arg value="1"/>
      <constructor-arg value="Ashok"/>
      <constructor-arg ref="address"/>
   </bean>

   <!-- Definition for spellChecker bean -->
   <bean id ="address" class="com.cts.demo.model.Addresss">
    <property name="hno" value="111"/>
    <property name="city" value="Agra"/>
   </bean>

</beans>
------------------------------------------------------------------------------------------------------
setter
<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <!-- Definition for textEditor bean -->
   <bean id = "employee" class = "com.cts.demo.model.Employee">
      <bean id = "employee" class = "com.cts.demo.model.Employee">
      <property name="id" value="1"/>
      <property name="name" value="Ashok"/>
      <property name="address" ref="address"/>
   </bean>

   <!-- Definition for spellChecker bean -->
   <bean id ="address" class="com.cts.demo.model.Address">
    <property name="hno" value="111"/>
    <property name="city" value="Agra"/>
   </bean>

</beans>
------------------------------------------------------------------------------------------------------------
3 Collections List,set,map 
https://www.tutorialspoint.com/spring/spring_injecting_collection.htm

<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <!-- Definition for textEditor bean -->
   <bean id = "company" class = "com.cts.demo.model.Company">
      <property name="names">
       <list>
          <value>Ram</value>
          <value>Soham</value>
          <value>Ajith</value>
       </list>
     </property>
   </bean>

 

</beans>
--------------------------------------------------------------------------------------------------------------

Beans autowiring 

https://www.tutorialspoint.com/spring/spring_beans_autowiring.htm
https://howtodoinjava.com/spring-core/spring-beans-autowiring-concepts/

You have learnt how to declare beans using the <bean> element and inject <bean> using <constructor-arg> and <property> elements in XML configuration file.

The Spring container can autowire relationships between collaborating beans without using <constructor-arg> and <property> elements, which helps cut down on the amount of XML configuration you write for a big Spring-based application.


1	no
This is default setting which means no autowiring and you should use explicit bean reference for wiring. You have nothing to do special for this wiring. This is what you already have seen in Dependency Injection chapter.

2	byName
Autowiring by property name. Spring container looks at the properties of the beans on which autowire attribute is set to byName in the XML configuration file. It then tries to match and wire its properties with the beans defined by the same names in the configuration file.

3	byType
Autowiring by property datatype. Spring container looks at the properties of the beans on which autowire attribute is set to byType in the XML configuration file. It then tries to match and wire a property if its type matches with exactly one of the beans name in configuration file. If more than one such beans exists, a fatal exception is thrown.

4	constructor
Similar to byType, but type applies to constructor arguments. If there is not exactly one bean of the constructor argument type in the container, a fatal error is raised.

5	autodetect
Spring first tries to wire using autowire by constructor, if it does not work, Spring tries to autowire by byType.



------------------------------------------------------------------------------------------------------------



<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id = "address" class = "com.cts.demo.model.Address">
      <property name="hno" value="111"/>
      </bean>

   <bean id = "employee" class = "com.cts.demo.model.Employee" autowire="byName">
      <property name="id" value="1"/>
     

   </bean>
</beans>



